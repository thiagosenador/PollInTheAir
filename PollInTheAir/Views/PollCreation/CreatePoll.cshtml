@using PollInTheAir.Domain.Models;

@model Poll

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section STYLES {
    <link rel="stylesheet" href="~/Content/bootstrap-datetimepicker.css" />
    <link rel="stylesheet" href="~/Content/ion.rangeSlider.css" />
    <link rel="stylesheet" href="~/Content/ion.rangeSlider.skinFlat.css" />

    <style type="text/css">
        #map {
            width: 100%;
            height: 400px;
            margin-bottom: 15px;
            border: 2px solid #fff;
        }

        #slider {
            margin-bottom: 40px;
        }
    </style>
}

@section SCRIPTS {
    <script src="~/Scripts/moment-with-locales.js"></script>
    <script src="~/Scripts/bootstrap-datetimepicker.js"></script>
    <script src="~/Scripts/ion.rangeSlider.js"></script>

    <script>

        // DATETIME PICKER

        $(function () {
            $('#ExpirationDate').datetimepicker({
                minDate: moment().add(1, 'hour'),
                locale: 'en-us',
                showClose: true
            });

            $("#datepickerIcon").click(function () {
                $('#ExpirationDate').data('DateTimePicker').show();
            });
        });

        // SLIDER

        var initialRange = 50;

        $(function () {

            $("#Range").ionRangeSlider({
                hide_min_max: true,
                keyboard: true,
                min: 20,
                max: 100,
                from: initialRange,
                type: 'single',
                step: 5,
                postfix: "m",
                grid: true,
                onChange: function (data) {
                    UpdateCircle(data['from']);
                }
            });
        });

        // GOOGLE MAPS

        var map;
        var pos;
        var circle;

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: -34.397, lng: 150.644 },
                zoom: 18,
                streetViewControl: false,
                mapTypeControl: false
            });

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    function (position) {
                        pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };

                        map.setCenter(pos);

                        this.PlaceMarker();

                        this.SetLatLongValues();

                        this.DrawRange();
                        this.UpdateCircle(initialRange);
                    });
            }
        }

        function PlaceMarker() {
            var marker = new google.maps.Marker({
                position: pos,
                map: map,
                title: 'you are here!'
            });

            marker.setMap(map);
        }

        function SetLatLongValues() {
            $("#latitude").val(pos.lat);
            $("#longitude").val(pos.lng);
        }

        function DrawRange() {
            circle = new google.maps.Circle({
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 1,
                fillColor: '#FF0000',
                fillOpacity: 0.35,
                map: map,
                center: pos
            });

            circle.setMap(map);
        }

        function UpdateCircle(radius) {
            circle.setRadius(radius);

            $("#Range").val(radius);
        }
    </script>

    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBTKJ2aBQb-q0LmbjCu2C-8TwGsgS7S1H4&callback=initMap">
    </script>
}

@section PAGETITLE {
    Create poll
}

@using (Html.BeginForm("CreatePoll", "PollCreation"))
{
    <div class="row">
        <div class="form-group">
            @Html.LabelFor(m => m.Name)
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @maxlength = "128" })
        </div>
    </div>

    <div class="row">
        <div class="form-group">
            @Html.LabelFor(m => m.ExpirationDate)

            <div class='input-group date'>
                @Html.TextBoxFor(m => m.ExpirationDate, new { @class = "form-control", @maxlength = "16" })

                <span class="input-group-addon" id="datepickerIcon">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="form-group">
            @Html.Label("range")

            <div>
                @Html.TextBoxFor(m => m.Range)
            </div>

            <div id="map"></div>

            @Html.HiddenFor(m => m.CreationLocation.Latitude, new {@id = "latitude"})
            @Html.HiddenFor(m => m.CreationLocation.Longitude, new {@id = "longitude"})
        </div>
    </div>
    
    @Html.Partial("CreateQuestionsButtonGroup", new ViewDataDictionary { { "ShowFinishButton", false }, { "SectionTitle", "create questions" } })
}